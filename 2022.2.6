# 类的getter、setter方法，及相关装饰器的使用
# class Student:
#     def __init__(self,name,age):
#         self.school='ahu'
#         self.__name=name
#         self.__age=age
#     @property
#     def age(self):
#         print('get方法已被等价调用')
#         return self.__age
#     @age.setter
#     def age(self,age):
#         self.__age=age
#         print('set方法已被等价调用')
#     def say_school(self):
#         print(self.school)
#     def hello(self):
#         print("你好！我叫{0},今年{1}岁了。".format(self.__name,self.__age ))
# s1=Student('胡超',20)
# s1.hello()
# s1.age=21
# print(s1.age)
# s1.hello()
class Person:
    def __init__(self,name,age):
        self.name=name
        self.age=age
        self.__century=20
    def get_century(self):
        return self.__century
    def set_century(self,century):
        self.__century =century
    def say_hello(self):
        print('你好！')
class Me(Person):
    def __init__(self,name,age,school):
        Person.__init__(self,name,age)
        self.school=school
    def say_goodbye(self):
        print('再见！')
s1=Me('胡超',20,'ahu')
print(s1.name)
print(s1._Person__century)
s1.set_century(21)
print(s1.get_century())
class A:
    pass
class B(A):
    pass
class C(B):
    pass
print(C.__mro__)
s1=A()
print(dir(s1))
重写_str_方法
class string:
    def __str__(self):
        return '这个对象很Low'
a=string()
print(a)
